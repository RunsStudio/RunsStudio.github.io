<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>安装和配置Pytorch和cuda</title>
    <link href="/2025/03/16/%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AEPytorch%E5%92%8Ccuda/"/>
    <url>/2025/03/16/%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AEPytorch%E5%92%8Ccuda/</url>
    
    <content type="html"><![CDATA[<h1 id="安装方法"><a href="#安装方法" class="headerlink" title="安装方法"></a>安装方法</h1><p>请参考：<a href="https://www.cnblogs.com/tryhardwy/p/14659131.html">https://www.cnblogs.com/tryhardwy/p/14659131.html</a></p><ol><li>卸载掉旧版本torch torchvision</li><li>先到（<a href="https://pytorch.org/get-started/locally/%EF%BC%89%E6%9F%A5%E5%88%B0%E7%A8%B3%E5%AE%9A%E7%89%88%E6%9C%ACtorch%E5%AF%B9%E5%BA%94%E7%9A%84cuda">https://pytorch.org/get-started/locally/）查到稳定版本torch对应的cuda</a></li><li>下载并安装cuda</li><li>到（<a href="https://pytorch.org/get-started/locally/%EF%BC%89%E6%8C%89%E7%85%A7%E5%AF%B9%E5%BA%94%E7%89%88%E6%9C%AC%E5%AE%89%E8%A3%85torch">https://pytorch.org/get-started/locally/）按照对应版本安装torch</a></li><li>安装完成后，进入python验证。</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br>torch.__version__<br>torch.cuda.is_available()<br></code></pre></td></tr></table></figure><p>显示True则安装成功。</p><h1 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h1><p>注意：直接粘贴</p><p><code>pip install torch torchvision torchaudio -f https://download.pytorch.org/whl/torch_stable.html</code> ，安装的是cpu版！</p><p>带cuda版本正确的安装语句是：</p><p><code>pip3 install torch==2.6.0+cu118 torchvision==0.21.0+cu118 --index-url https://download.pytorch.org/whl/cu118</code></p><p>如果上述地址下载太慢，还可以换用国内源例如aliyun（备注：阿里云的torch版本不全，部分最新版本无法下载，经过实验2.1.0版本可以下载并安装）<br><code>pip install torch==2.1.0+cu118 --use-deprecated=legacy-resolver  --no-cache-dir -f https://mirrors.aliyun.com/pytorch-wheels/cu118</code></p><p>其他的包 如果国内地址下载太慢，可以用以下常用镜像：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs awk">常见镜像源<br><br>清华：https:<span class="hljs-regexp">//</span>pypi.tuna.tsinghua.edu.cn<span class="hljs-regexp">/simple/</span><br>阿里云：http:<span class="hljs-regexp">//mi</span>rrors.aliyun.com<span class="hljs-regexp">/pypi/</span>simple/<br>中国科技大学：https:<span class="hljs-regexp">//</span>pypi.mirrors.ustc.edu.cn<span class="hljs-regexp">/simple/</span><br>华中科技大学：http:<span class="hljs-regexp">//</span>pypi.hustunique.com<span class="hljs-regexp">/simple/</span><br>上海交通大学：https:<span class="hljs-regexp">//mi</span>rror.sjtu.edu.cn<span class="hljs-regexp">/pypi/</span>web<span class="hljs-regexp">/simple/</span><br></code></pre></td></tr></table></figure><p>如果使用不带https的连接，还需要加上<code>--trusted-host mirrors.xxx.com</code><br>例如<br><code>pip install numpy&lt;=2.0.0 -i http://mirrors.aliyun.com/pypi/simple/ --trusted-host mirrors.aliyun.com</code></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hexo新建博客并上传Github全流程</title>
    <link href="/2025/03/04/hexo%E6%96%B0%E5%BB%BA%E6%93%8D%E4%BD%9C%E5%B9%B6%E4%B8%8A%E4%BC%A0%E6%B5%81%E7%A8%8B/"/>
    <url>/2025/03/04/hexo%E6%96%B0%E5%BB%BA%E6%93%8D%E4%BD%9C%E5%B9%B6%E4%B8%8A%E4%BC%A0%E6%B5%81%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="step-1-安装node-js和git环境"><a href="#step-1-安装node-js和git环境" class="headerlink" title="step 1. 安装node.js和git环境"></a>step 1. 安装node.js和git环境</h1><p>可参考网上教程</p><h1 id="step-2-安装hexo"><a href="#step-2-安装hexo" class="headerlink" title="step 2. 安装hexo"></a>step 2. 安装hexo</h1><p>此时已经安装好了node.js和git，下面开始hexo的安装<br>首先在某一磁盘目录下创建文件夹，例如F盘，创建文件夹名为 Blog<br>进入Blog文件夹，右键鼠标-&gt;选择<code>Git Bash Here</code><br>输入 <code>npm install -g hexo-cli</code> ，并耐心等待一段时间<br>输入 <code>npm install hexo -save</code>，也耐心等待一段时间<br>此时我们可以发现，在Blog文件夹中多了许多内容<br>在Blog文件夹中新建文件夹，命名为hexo<br>关闭当前Git Bash，进入hexo文件夹，右键鼠标-&gt;选择Git Bash Here，或者直接在当前的Git Bash中输入 cd hexo<br>输入hexo init，初始化hexo环境，耐心等待一段时间<br>输入npm install，安装npm依赖包，耐心等待一段时间<br>输入hexo generate或者是hexo g，生成静态页面，耐心等待一段时间<br>输入hexo server或者是hexo s，生成本地服务。我们每次写完博客后，可以先在本地预览一下看看有没有什么问题，然后再发布到网上。<br>接着，我们在浏览器中访问<a href="http://localhost:4000/%EF%BC%8C%E8%BF%99%E5%B0%B1%E6%98%AF%E5%9C%A8%E6%9C%AC%E5%9C%B0%E7%94%9F%E6%88%90%E7%9A%84%E4%B8%80%E4%B8%AA%E5%8D%9A%E5%AE%A2%E3%80%82">http://localhost:4000/，这就是在本地生成的一个博客。</a><br>在Git Bash中按下Ctrl+C，可以关闭当前端口服务。</p><p>到这里，我们的本地博客就已经搭建完成了。下面将介绍如何与Github连接，将博客上传Internet</p><h1 id="step-3-新建Github仓库"><a href="#step-3-新建Github仓库" class="headerlink" title="step 3. 新建Github仓库"></a>step 3. 新建Github仓库</h1><p>登录到自己的Github中，新建一个仓库，命名为username.github.io，其中的username是你的用户名，勾选Initialiaze this repository with a README，创建仓库<br>我们可以访问自己的<code>username.github.io</code><br>返回<code>username.github.io</code>的仓库中，复制Git地址</p><h1 id="step-4-本地操作"><a href="#step-4-本地操作" class="headerlink" title="step 4.本地操作"></a>step 4.本地操作</h1><p>我们在<code>/Blog/hexo/</code>文件夹中，找到<code>_config.yml</code>文件，用文本编辑器打开它<br>将最下面的deploy改为下图所示的内容，其中repo的地址就是刚才我们复制的Git地址，修改好后保存退出 【注】修改内容中的:和后面的字母之间要有一个空格，否则后续内容会报错<br>接下来，我们暂且不考虑新建文章，在<code>Git Bash</code>中执行<code>npm install hexo-deployer-git </code>–save命令，耐心等待一段时间<br>最后执行 <code>hexo deploy</code>或者<code>hexo d</code>【注】这一步需要保证Github上拥有本机的公钥，可以自行查找解决办法<br>最后，成功部署</p><h1 id="step-5-上传博客"><a href="#step-5-上传博客" class="headerlink" title="step 5.上传博客"></a>step 5.上传博客</h1><h2 id="新建文章"><a href="#新建文章" class="headerlink" title="新建文章"></a>新建文章</h2><p>在Git Bash中输入<code>hexo new title</code>，其中，title就是我们这篇文章的名字。我们可以看到，在\Blog\hexo\source_posts\ 文件夹中新建了一个名称为<code>Test1.md</code>的文件<br>我们去编辑一下这个文件，此处需要Linux的部分知识，可以自行上网查找<br>编辑结束后，保存退出</p><h2 id="上传"><a href="#上传" class="headerlink" title="上传"></a>上传</h2><p>使用hexo g，生成静态文件<br>使用hexo d来将文档部署到Github上<br>最后我们访问username.github.io，发现刚才编辑的文档已经成功发布到了Internet上面<br>————————————————</p><p>版权声明：本文为博主原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接和本声明。</p><p>原文链接：<a href="https://blog.csdn.net/qq_43669381/article/details/107823432">https://blog.csdn.net/qq_43669381/article/details/107823432</a></p><p>部署流程（带图版）：<a href="https://blog.csdn.net/clearloe/article/details/139879493">https://blog.csdn.net/clearloe/article/details/139879493</a></p><h2 id="乱码问题解决方法"><a href="#乱码问题解决方法" class="headerlink" title="乱码问题解决方法"></a>乱码问题解决方法</h2><p>需要注意：如果本地部署没有出现乱码，但是主题上传到github上可能出现乱码，排版不正常的情况，此时要修改 <code>__config.yaml</code> 文件,修改：<br>url: <a href="https://yourpage.github.io/">https://yourpage.github.io</a> （自己的主页的网址，最后不要有&#x2F;）<br>root: &#x2F;   （增加这一行）<br>保存后重新生成并部署即可正常显示。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Run&#39;s Studio 重新出发</title>
    <link href="/2025/03/04/hello-world/"/>
    <url>/2025/03/04/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
